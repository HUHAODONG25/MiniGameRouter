// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class ContentProto;
struct ContentProtoDefaultTypeInternal;
extern ContentProtoDefaultTypeInternal _ContentProto_default_instance_;
class EndpointProto;
struct EndpointProtoDefaultTypeInternal;
extern EndpointProtoDefaultTypeInternal _EndpointProto_default_instance_;
class MessageProto;
struct MessageProtoDefaultTypeInternal;
extern MessageProtoDefaultTypeInternal _MessageProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ContentProto* Arena::CreateMaybeMessage<::ContentProto>(Arena*);
template<> ::EndpointProto* Arena::CreateMaybeMessage<::EndpointProto>(Arena*);
template<> ::MessageProto* Arena::CreateMaybeMessage<::MessageProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EndpointProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EndpointProto) */ {
 public:
  inline EndpointProto() : EndpointProto(nullptr) {}
  ~EndpointProto() override;
  explicit PROTOBUF_CONSTEXPR EndpointProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndpointProto(const EndpointProto& from);
  EndpointProto(EndpointProto&& from) noexcept
    : EndpointProto() {
    *this = ::std::move(from);
  }

  inline EndpointProto& operator=(const EndpointProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointProto& operator=(EndpointProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndpointProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndpointProto* internal_default_instance() {
    return reinterpret_cast<const EndpointProto*>(
               &_EndpointProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EndpointProto& a, EndpointProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndpointProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndpointProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndpointProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndpointProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndpointProto& from) {
    EndpointProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EndpointProto";
  }
  protected:
  explicit EndpointProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kSvcNameFieldNumber = 3,
    kPortFieldNumber = 2,
    kWeightFieldNumber = 4,
  };
  // string ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string svc_name = 3;
  void clear_svc_name();
  const std::string& svc_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_svc_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_svc_name();
  PROTOBUF_NODISCARD std::string* release_svc_name();
  void set_allocated_svc_name(std::string* svc_name);
  private:
  const std::string& _internal_svc_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_svc_name(const std::string& value);
  std::string* _internal_mutable_svc_name();
  public:

  // int32 port = 2;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 weight = 4;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:EndpointProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr svc_name_;
    int32_t port_;
    int32_t weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class MessageProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageProto) */ {
 public:
  inline MessageProto() : MessageProto(nullptr) {}
  ~MessageProto() override;
  explicit PROTOBUF_CONSTEXPR MessageProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageProto(const MessageProto& from);
  MessageProto(MessageProto&& from) noexcept
    : MessageProto() {
    *this = ::std::move(from);
  }

  inline MessageProto& operator=(const MessageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageProto& operator=(MessageProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageProto* internal_default_instance() {
    return reinterpret_cast<const MessageProto*>(
               &_MessageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageProto& a, MessageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageProto& from) {
    MessageProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageProto";
  }
  protected:
  explicit MessageProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kContentFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kSenderFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kMTypeFieldNumber = 4,
  };
  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string content = 5;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // string timestamp = 6;
  void clear_timestamp();
  const std::string& timestamp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_timestamp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // .EndpointProto sender = 1;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::EndpointProto& sender() const;
  PROTOBUF_NODISCARD ::EndpointProto* release_sender();
  ::EndpointProto* mutable_sender();
  void set_allocated_sender(::EndpointProto* sender);
  private:
  const ::EndpointProto& _internal_sender() const;
  ::EndpointProto* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::EndpointProto* sender);
  ::EndpointProto* unsafe_arena_release_sender();

  // .EndpointProto receiver = 2;
  bool has_receiver() const;
  private:
  bool _internal_has_receiver() const;
  public:
  void clear_receiver();
  const ::EndpointProto& receiver() const;
  PROTOBUF_NODISCARD ::EndpointProto* release_receiver();
  ::EndpointProto* mutable_receiver();
  void set_allocated_receiver(::EndpointProto* receiver);
  private:
  const ::EndpointProto& _internal_receiver() const;
  ::EndpointProto* _internal_mutable_receiver();
  public:
  void unsafe_arena_set_allocated_receiver(
      ::EndpointProto* receiver);
  ::EndpointProto* unsafe_arena_release_receiver();

  // int32 m_type = 4;
  void clear_m_type();
  int32_t m_type() const;
  void set_m_type(int32_t value);
  private:
  int32_t _internal_m_type() const;
  void _internal_set_m_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:MessageProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
    ::EndpointProto* sender_;
    ::EndpointProto* receiver_;
    int32_t m_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class ContentProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ContentProto) */ {
 public:
  inline ContentProto() : ContentProto(nullptr) {}
  ~ContentProto() override;
  explicit PROTOBUF_CONSTEXPR ContentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContentProto(const ContentProto& from);
  ContentProto(ContentProto&& from) noexcept
    : ContentProto() {
    *this = ::std::move(from);
  }

  inline ContentProto& operator=(const ContentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentProto& operator=(ContentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContentProto* internal_default_instance() {
    return reinterpret_cast<const ContentProto*>(
               &_ContentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentProto& a, ContentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ContentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ContentProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ContentProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ContentProto& from) {
    ContentProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContentProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ContentProto";
  }
  protected:
  explicit ContentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpsFieldNumber = 1,
  };
  // repeated .EndpointProto eps = 1;
  int eps_size() const;
  private:
  int _internal_eps_size() const;
  public:
  void clear_eps();
  ::EndpointProto* mutable_eps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointProto >*
      mutable_eps();
  private:
  const ::EndpointProto& _internal_eps(int index) const;
  ::EndpointProto* _internal_add_eps();
  public:
  const ::EndpointProto& eps(int index) const;
  ::EndpointProto* add_eps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointProto >&
      eps() const;

  // @@protoc_insertion_point(class_scope:ContentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointProto > eps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EndpointProto

// string ip_address = 1;
inline void EndpointProto::clear_ip_address() {
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& EndpointProto::ip_address() const {
  // @@protoc_insertion_point(field_get:EndpointProto.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EndpointProto::set_ip_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EndpointProto.ip_address)
}
inline std::string* EndpointProto::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:EndpointProto.ip_address)
  return _s;
}
inline const std::string& EndpointProto::_internal_ip_address() const {
  return _impl_.ip_address_.Get();
}
inline void EndpointProto::_internal_set_ip_address(const std::string& value) {
  
  _impl_.ip_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EndpointProto::_internal_mutable_ip_address() {
  
  return _impl_.ip_address_.Mutable(GetArenaForAllocation());
}
inline std::string* EndpointProto::release_ip_address() {
  // @@protoc_insertion_point(field_release:EndpointProto.ip_address)
  return _impl_.ip_address_.Release();
}
inline void EndpointProto::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  _impl_.ip_address_.SetAllocated(ip_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EndpointProto.ip_address)
}

// int32 port = 2;
inline void EndpointProto::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t EndpointProto::_internal_port() const {
  return _impl_.port_;
}
inline int32_t EndpointProto::port() const {
  // @@protoc_insertion_point(field_get:EndpointProto.port)
  return _internal_port();
}
inline void EndpointProto::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void EndpointProto::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:EndpointProto.port)
}

// string svc_name = 3;
inline void EndpointProto::clear_svc_name() {
  _impl_.svc_name_.ClearToEmpty();
}
inline const std::string& EndpointProto::svc_name() const {
  // @@protoc_insertion_point(field_get:EndpointProto.svc_name)
  return _internal_svc_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EndpointProto::set_svc_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.svc_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EndpointProto.svc_name)
}
inline std::string* EndpointProto::mutable_svc_name() {
  std::string* _s = _internal_mutable_svc_name();
  // @@protoc_insertion_point(field_mutable:EndpointProto.svc_name)
  return _s;
}
inline const std::string& EndpointProto::_internal_svc_name() const {
  return _impl_.svc_name_.Get();
}
inline void EndpointProto::_internal_set_svc_name(const std::string& value) {
  
  _impl_.svc_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EndpointProto::_internal_mutable_svc_name() {
  
  return _impl_.svc_name_.Mutable(GetArenaForAllocation());
}
inline std::string* EndpointProto::release_svc_name() {
  // @@protoc_insertion_point(field_release:EndpointProto.svc_name)
  return _impl_.svc_name_.Release();
}
inline void EndpointProto::set_allocated_svc_name(std::string* svc_name) {
  if (svc_name != nullptr) {
    
  } else {
    
  }
  _impl_.svc_name_.SetAllocated(svc_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.svc_name_.IsDefault()) {
    _impl_.svc_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:EndpointProto.svc_name)
}

// int32 weight = 4;
inline void EndpointProto::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t EndpointProto::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t EndpointProto::weight() const {
  // @@protoc_insertion_point(field_get:EndpointProto.weight)
  return _internal_weight();
}
inline void EndpointProto::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void EndpointProto::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:EndpointProto.weight)
}

// -------------------------------------------------------------------

// MessageProto

// .EndpointProto sender = 1;
inline bool MessageProto::_internal_has_sender() const {
  return this != internal_default_instance() && _impl_.sender_ != nullptr;
}
inline bool MessageProto::has_sender() const {
  return _internal_has_sender();
}
inline void MessageProto::clear_sender() {
  if (GetArenaForAllocation() == nullptr && _impl_.sender_ != nullptr) {
    delete _impl_.sender_;
  }
  _impl_.sender_ = nullptr;
}
inline const ::EndpointProto& MessageProto::_internal_sender() const {
  const ::EndpointProto* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::EndpointProto&>(
      ::_EndpointProto_default_instance_);
}
inline const ::EndpointProto& MessageProto::sender() const {
  // @@protoc_insertion_point(field_get:MessageProto.sender)
  return _internal_sender();
}
inline void MessageProto::unsafe_arena_set_allocated_sender(
    ::EndpointProto* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageProto.sender)
}
inline ::EndpointProto* MessageProto::release_sender() {
  
  ::EndpointProto* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EndpointProto* MessageProto::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:MessageProto.sender)
  
  ::EndpointProto* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::EndpointProto* MessageProto::_internal_mutable_sender() {
  
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::EndpointProto>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::EndpointProto* MessageProto::mutable_sender() {
  ::EndpointProto* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:MessageProto.sender)
  return _msg;
}
inline void MessageProto::set_allocated_sender(::EndpointProto* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:MessageProto.sender)
}

// .EndpointProto receiver = 2;
inline bool MessageProto::_internal_has_receiver() const {
  return this != internal_default_instance() && _impl_.receiver_ != nullptr;
}
inline bool MessageProto::has_receiver() const {
  return _internal_has_receiver();
}
inline void MessageProto::clear_receiver() {
  if (GetArenaForAllocation() == nullptr && _impl_.receiver_ != nullptr) {
    delete _impl_.receiver_;
  }
  _impl_.receiver_ = nullptr;
}
inline const ::EndpointProto& MessageProto::_internal_receiver() const {
  const ::EndpointProto* p = _impl_.receiver_;
  return p != nullptr ? *p : reinterpret_cast<const ::EndpointProto&>(
      ::_EndpointProto_default_instance_);
}
inline const ::EndpointProto& MessageProto::receiver() const {
  // @@protoc_insertion_point(field_get:MessageProto.receiver)
  return _internal_receiver();
}
inline void MessageProto::unsafe_arena_set_allocated_receiver(
    ::EndpointProto* receiver) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receiver_);
  }
  _impl_.receiver_ = receiver;
  if (receiver) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageProto.receiver)
}
inline ::EndpointProto* MessageProto::release_receiver() {
  
  ::EndpointProto* temp = _impl_.receiver_;
  _impl_.receiver_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::EndpointProto* MessageProto::unsafe_arena_release_receiver() {
  // @@protoc_insertion_point(field_release:MessageProto.receiver)
  
  ::EndpointProto* temp = _impl_.receiver_;
  _impl_.receiver_ = nullptr;
  return temp;
}
inline ::EndpointProto* MessageProto::_internal_mutable_receiver() {
  
  if (_impl_.receiver_ == nullptr) {
    auto* p = CreateMaybeMessage<::EndpointProto>(GetArenaForAllocation());
    _impl_.receiver_ = p;
  }
  return _impl_.receiver_;
}
inline ::EndpointProto* MessageProto::mutable_receiver() {
  ::EndpointProto* _msg = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:MessageProto.receiver)
  return _msg;
}
inline void MessageProto::set_allocated_receiver(::EndpointProto* receiver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.receiver_;
  }
  if (receiver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(receiver);
    if (message_arena != submessage_arena) {
      receiver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.receiver_ = receiver;
  // @@protoc_insertion_point(field_set_allocated:MessageProto.receiver)
}

// string key = 3;
inline void MessageProto::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& MessageProto::key() const {
  // @@protoc_insertion_point(field_get:MessageProto.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageProto::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageProto.key)
}
inline std::string* MessageProto::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:MessageProto.key)
  return _s;
}
inline const std::string& MessageProto::_internal_key() const {
  return _impl_.key_.Get();
}
inline void MessageProto::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageProto::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageProto::release_key() {
  // @@protoc_insertion_point(field_release:MessageProto.key)
  return _impl_.key_.Release();
}
inline void MessageProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageProto.key)
}

// int32 m_type = 4;
inline void MessageProto::clear_m_type() {
  _impl_.m_type_ = 0;
}
inline int32_t MessageProto::_internal_m_type() const {
  return _impl_.m_type_;
}
inline int32_t MessageProto::m_type() const {
  // @@protoc_insertion_point(field_get:MessageProto.m_type)
  return _internal_m_type();
}
inline void MessageProto::_internal_set_m_type(int32_t value) {
  
  _impl_.m_type_ = value;
}
inline void MessageProto::set_m_type(int32_t value) {
  _internal_set_m_type(value);
  // @@protoc_insertion_point(field_set:MessageProto.m_type)
}

// string content = 5;
inline void MessageProto::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& MessageProto::content() const {
  // @@protoc_insertion_point(field_get:MessageProto.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageProto::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageProto.content)
}
inline std::string* MessageProto::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:MessageProto.content)
  return _s;
}
inline const std::string& MessageProto::_internal_content() const {
  return _impl_.content_.Get();
}
inline void MessageProto::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageProto::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageProto::release_content() {
  // @@protoc_insertion_point(field_release:MessageProto.content)
  return _impl_.content_.Release();
}
inline void MessageProto::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageProto.content)
}

// string timestamp = 6;
inline void MessageProto::clear_timestamp() {
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& MessageProto::timestamp() const {
  // @@protoc_insertion_point(field_get:MessageProto.timestamp)
  return _internal_timestamp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageProto::set_timestamp(ArgT0&& arg0, ArgT... args) {
 
 _impl_.timestamp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:MessageProto.timestamp)
}
inline std::string* MessageProto::mutable_timestamp() {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:MessageProto.timestamp)
  return _s;
}
inline const std::string& MessageProto::_internal_timestamp() const {
  return _impl_.timestamp_.Get();
}
inline void MessageProto::_internal_set_timestamp(const std::string& value) {
  
  _impl_.timestamp_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageProto::_internal_mutable_timestamp() {
  
  return _impl_.timestamp_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageProto::release_timestamp() {
  // @@protoc_insertion_point(field_release:MessageProto.timestamp)
  return _impl_.timestamp_.Release();
}
inline void MessageProto::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    
  } else {
    
  }
  _impl_.timestamp_.SetAllocated(timestamp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MessageProto.timestamp)
}

// -------------------------------------------------------------------

// ContentProto

// repeated .EndpointProto eps = 1;
inline int ContentProto::_internal_eps_size() const {
  return _impl_.eps_.size();
}
inline int ContentProto::eps_size() const {
  return _internal_eps_size();
}
inline void ContentProto::clear_eps() {
  _impl_.eps_.Clear();
}
inline ::EndpointProto* ContentProto::mutable_eps(int index) {
  // @@protoc_insertion_point(field_mutable:ContentProto.eps)
  return _impl_.eps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointProto >*
ContentProto::mutable_eps() {
  // @@protoc_insertion_point(field_mutable_list:ContentProto.eps)
  return &_impl_.eps_;
}
inline const ::EndpointProto& ContentProto::_internal_eps(int index) const {
  return _impl_.eps_.Get(index);
}
inline const ::EndpointProto& ContentProto::eps(int index) const {
  // @@protoc_insertion_point(field_get:ContentProto.eps)
  return _internal_eps(index);
}
inline ::EndpointProto* ContentProto::_internal_add_eps() {
  return _impl_.eps_.Add();
}
inline ::EndpointProto* ContentProto::add_eps() {
  ::EndpointProto* _add = _internal_add_eps();
  // @@protoc_insertion_point(field_add:ContentProto.eps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EndpointProto >&
ContentProto::eps() const {
  // @@protoc_insertion_point(field_list:ContentProto.eps)
  return _impl_.eps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
